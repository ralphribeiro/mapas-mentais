@startmindmap
<style>
node {
    Padding 5
    HorizontalAlignment center
    LineColor brown
    LineThickness 1.0
    BackgroundColor white
    RoundCorner 10
    FontSize 10
    MaximumWidth 200

}

rootNode {
    FontSize 25
    FontColor brown
    LineStyle 8.0;3.0
    LineColor brown
    BackgroundColor lightyellow
    LineThickness 2.0
    RoundCorner 2
    Shadowing 0.0
}

leafNode {
    LineColor green
    LineThickness 0.5
    RoundCorner 10
    Padding 2
    BackgroundColor white
    FontSize 8
    MaximumWidth 350
    Margin 3
    HorizontalAlignment left
}

arrow {
    LineStyle 0
    LineThickness 0.5
    LineColor green    
}
</style>

* DDD
** Estratégico / Modelagem estratégica
*** Contextos limitados
**** Container contextual, não somente um modelo, frequentemente é uma aplicação ou um serviço de negócio
**** Domínio
***** Cada tipo de organização tem seu próprio domínio de know-how e maneira de fazer as coisas. Esse reino de compreensão e seus métodos para realizar suas operações é seu Domínio
***** Domínio pricipal
****** Onde reside a funcionalidade principal do domínio
***** Subdomínios
****** Os demais domínios que suportam o princial
****** Subdomínios de suporte
****** Subdomínios genéricos
*** Linguagem ubíqua
**** Linguagem do negócio usada por todos num contexto limitado
*** Mapas de contextos
**** Mapa da situação atual de todos os contextos limitados e seus relacionamentos
**** Relacionamentos
***** Parceria
***** Kernel compartilhado
***** Desenvolvimento cliente-servidor
***** Comformista
***** Camada anti-corrupção ACL
***** Serviço de host aberto OHS
***** Linguagem publicada PL
***** Caminhos separados
***** Grande bola de lama


** Tático / Design tático, Conjunto de técnicas usados para construção do Modelo de Domínio
*** Entidades
**** Identidade
***** Criação
****** Pelo usuário
****** Pela aplicação
****** Pelo mecanismo de persistência
******* Identidade substituta
****** Por outro contexto limitado
***** Layer Supertype
***** Imutável / Mantê-la estável
***** Quais as razões para mudar?
**** Primeiro queremos nos concentrar apenas em atributos/propriedades que fornecem identidade e permitem a correspondência em consultas
**** Interface de Revelação de Intenção
**** Regras e Responsabilidades
**** Construção
***** Factory
**** Validação*
***** Atributos / Propriedades
****** Auto-encapsulamento
****** Verificação da sanidade
***** Objetos inteiros
****** Specification
****** Strategy
****** Verificação de atividades mais simples
****** Separar em objetos de validação*
***** Composição de objetos
****** Validações adiadas
****** Em serviços de domínio
***** Rastreamento de mudanças*
****** Event Sourcing
*** Objetos de valor
**** Mede, quantifica ou descreve algo no domínio.
**** Pode ser mantido como imutável.
**** Modela um todo conceitual, compondo atributos relacionados como uma unidade integral.
***** Factory
***** Builder
**** É completamente substituível quando a medição ou descrição muda.
**** Pode ser comparado com outros usando a igualdade de valor.
**** Fornece a seus colaboradores o comportamento Side-Effect-Free.
***** CQS
***** CQRS
***** Substituição em vez de mutação
***** Quando puder, escolha Objetos de valor para modelar integrações. 
**** Tipos padrão
***** enum*
***** State
***** Como agregado
****** Service
****** Factory
**** Testes
***** Demonstrar como os vários objetos no modelo de domínio serão usados pelos clientes e o que esses clientes podem esperar ao usá-los.
**** Implementação
***** Strategy* (Policy) (sem/com) Separated Interface
**** Persistência
***** Repositories
****** ORM e objetos de valor único.
****** ORM e muitos valores serializados em uma única coluna.
****** ORM e muitos valores apoiados por uma entidade de banco de dados.
****** ORM e muitos valores apoiados por uma tabela de junção.
****** Objetos ORM e Enum-as-State.
***** Recuperado junto aos seu agregados e entidades
***** O modelo de dados deve ser subordinado 
*** Serviços
**** Como regra geral, devemos tentar evitar o uso de Repositórios de dentro de Agregados, se possível.
**** de Domínio
***** Sem estado
***** exemplos: \n • Executar um processo de negócios significativo; \n • Transformar um objeto de domínio de uma composição para outra; \n • Calcular um valor que requer entrada de mais de um objeto de domínio.
***** Implementação
****** Interfaces separadas no mesmo Módulo
******* DIP
******* Hexagonal
****** Classes concretas especializadas
**** de Aplicação
**** de transformação
**** de Testes
**** Testes
***** Quando os testes de aceitação no domínio forem validados então reescrevê-los (os pertinentes) na camada de serviços pois os primeiros se tornam fortemente acoplados ao domínio portanto tornando futuras alterações no modelo de domínio desencorajadoras.
***** Expresse sua camada de serviço em termos de primitivos em vez de objetos de domínio.
***** Em um mundo ideal, você terá todos os serviços de que precisa para poder testar inteiramente na camada de serviço, em vez de hackear o estado por meio de repositórios ou banco de dados. Isso também compensa em seus testes de ponta a ponta.
*** Eventos
**** de Domínio
***** Publish-Subscribe/Observer
****** Não usar a notificação de evento para modificar uma segunda instância do Agregado.
***** Event Sourcing
****** Enriquecimento de eventos*
***** Consistência eventual
***** Com características de agregado
****** Persistente
****** Imutável ou Id exclusivo
****** Confirmação de duas fases
***** Event Store
****** Estilos arquiteturais
******* RESTfull
******* Messaging Middleware
**** da Aplicação
**** Não misturar exceções junto com eventos no fluxo de controle
*** Módulos
**** • Porjetar para se adequar aos conceitos de modelagem.\n• Nomear com a Linguagem ubíqua.\n• Não criar módulos mecanicamente de acordo com com componentes de tipo genérico ou padrões usados na modelagem.\n • Projetar módulos com acoplamento fraco.\n • Se esforçar para ter dependências acíclicas em seus pares onde o acoplamento é necessário.\n• Relaxe um pouco para as regras entre os módulos filho e pai.\n• Não tornar os módulos estáticos, permita-os serem modelados juntos com os objetos que eles organizam.
**** Nomeação
***** • organização.contextolimitado.domínio.modelo.\n• organização.contextolimitado.domínio.serviços...
***** ou modelos e serviços num mesmo Módulo
***** Levar em consideração que os contextos limitados não devem ser usados como um substituto para os módulos. Usar Módulos para modularizar objetos de domínio coesos e para separar aqueles que não são coesos ou menos coesos.
*** Agregados
**** De quem é o trabalho?
**** Mantê-los pequenos
**** Referenciados pelo id fora do seu limite.
**** Simultaneidade
***** Otimista - Versionamento das Entidades
**** Consistência
***** Transacional - Imediata e atômica - dentro dos limites
****** Unit of Work
***** Eventual - fora dos limites
****** Usar como regra
**** Tentar manter várias instâncias de Aggregate consistentes pode estar dizendo a você que sua equipe perdeu uma invariante.
**** Disconnected Domain Model (menos favorável)
***** Quando, opcionalmente, um agregado acessa um outro dentro de sua fronteira usando um repositório (uma forma de carregamento lento).
**** Usar Repository ou Domain Service para pesquisar objetos dependentes antes de invocar o comportamento Agregado.
**** motivos para quebra das regras:
***** CQRS
***** Por conveniência da interface do usuário
***** Falta de mecanismos técnicos
***** Transações globais
***** Desempenho de consulta
**** Estimativa de custos
***** BOTE*
**** Lei de Demeter; Fale, não pergunte.
**** Evitar injeção de Repositórios e Serviços de Domínio em instâncias do Aggregate. 
*** Fábricas
**** Serviços funcionam como Fábricas que produzem Agregados ou Objetos de Valor de vários tipos.
**** Factory Method
**** Abstract Method
***** hierarquia de objetos = dor
*** Reposiórios
**** Fornecer repositórios somente para Agregados (na teoria)
**** Um por repositório
**** DesignedDomainStereotypeFontColor
***** Orientado a coleção
****** Deve imitar uma coleção Set
***** Orientado a persistência
****** Data Fabric
****** NoSQL
****** Colocar explicitamente () objetos novos e alterados no armazenamento, substituindo efetivamente qualquer valor previamente associado à chave fornecida. Usar esses tipos de armazenamento de dados simplifica muito as gravações e leituras básicas de agregados. Por esse motivo, às vezes são chamados de Aggregate Stores ou Aggregate-Oriented Databases.
***** É uma proposta potencialmente cara instanciar um Repositório para cada transação.


left
** Arquitetura
*** Camadas
**** Interface
***** Modelo de apresentação
***** Serviço de host aberto
**** Aplicação
***** Serviços de aplicação
****** Factory
****** Publicador de eventos de domínio
***** Serviços de domínio - ênfase na estratégia do negócio
****** Eventos de domínio
**** Infraestrutura
***** Repositórios
***** Módulos
****** DIP
**** Relacionamentos
***** Estrito - Acoplamento somente às camadas abaixo
***** Relaxado - Camada de nível alto acessa qualquer abaixo
***** Camadas inferiores podem se acoplar livremente às camadas superiores
****** Observer
****** Mediator
*** Hexagonal ou Porta e adaptadores
**** Portas - Canais com o mundo externo
**** Adaptadores - Adapta os dados que trafega pelas porta
*** SOA
**** Pincípios
***** Contrato
***** Acoplamento solto
***** Abstração
***** Autonomia
***** Statelessness
***** Apto a ser descoberto
***** Apto a composição
**** REST / RESTful / SOAP / Mensageria
*** CQRS
**** Separação dos modelos de comandos dos de leitura
**** Comandos
***** Categorizados
****** Cada serviço de aplicativo pode ter vários métodos. A principal vantagem aqui é a simplicidade. Esse tipo de manipulador é bem conhecido, fácil de criar e manter. 
***** Dedicados
****** Cada um seria uma única classe com um método. Isso tem vantagens claras: há uma única responsabilidade por manipulador / processador; cada manipulador pode ser reimplantado independentemente ; os tipos de manipulador podem ser dimensionados para gerenciar grandes volumes de certos tipos de comandos.
****** Permite Assincronia
****** Consistência eventual
**** Leituras
***** Eventos
***** Modelos de dados desnornalizado
**** Pub/Sub
***** Observer
*** Orientada a Eventos EDA
**** Promove a produção, detecção, consumo e reação a eventos
**** Pipe and Filters
***** Pipes são canais de mensagem
***** Portas conecta Filter aos Pipes
***** Filters são processadores
***** Pocessadores separados
***** Acoplamento fraco
***** Intercâmbialidade
***** Filters podese ser multi Pipe
***** Use o mesmo tipo de Filter em paralelo
**** Processo de longa duração / Sagas
***** Tarefa composta
***** Conjunto de atividades num conjunto de agragados
***** Processo sem estado, sendo enriquecido a cada eventos
**** Event-Sourcing
***** Persistência de dos eventos com carimbo de data, sendo possível recriar o agregado em determinado momento do passado
**** Data Fabric e grid-based distributed computing
***** Replicação de dados / cache
***** Suporta o estilo Event-Driven
***** Queries contínuas
***** Processamento distribuído

** Integração de contextos limitados
*** Meios
**** RESTfull
***** Não permite que os clientes sejam completamente autonomos.
**** Mensageria
***** Eventos de domínio
**** RPC
***** Menos resiliência nos tratamentos de erros.
**** outros
*** Princípios da computação distribuída
**** • A rede não é confiável.\n• Sempre há alguma latência, e talvez muita.\n• A largura de banda não é infinita.\n• Não presuma que a rede é segura.\n• Topologias da rede mudam.\n• Conhecimento e políticas são espalhados por vários administradores.\n• O transporte em rede tem custo.\n• A rede é heterogênea.
*** Notificação e Eventos
**** Linguagem publicada
**** Adaptadores
**** • Type: Notification format: JSON\n• notificationId: long integer unique identity\n• typeName: text String type of notification, an example type name being com.saasovation.agilepm.domain.model.product.↵backlogItem.BacklogItemCommitted\n• version: integer version of the notification\n• occurredOn: date/time when the notification’s contained Event happened\n• event: JSON payload details; see specific Event types
**** Os eventos também podem conter com segurança instâncias de Objetos de Valor mais sofisticados (6), o que é especialmente eficaz quando seus tipos de Valor tendem a ser estáveis.
*** Anticorruption Layer
**** • Serviço da aplicação cliente\n• Adaptador\n• Tradutor

** Aplicação
*** Interface do Usuário
**** Podem precisar renderizar várias instâncias de Agregado pra poder modificar uma instância por vez. Evitar que o cliente navegue profundamente nos Agregados
**** DTO Assembler
***** para camadas de apresetação remotas
****** poder de optar por interfaces de Mediator
**** Domain Payload Object (DPO)
***** tambem pode optar por interfaces de Mediator
***** Domain Depedency Resolver
**** View Model
***** Resista à tentação de produzir representações que sejam um reflexo individual de seu modelo de domínio. 
**** Use Case Optimal Repository Queries
***** Repositório
***** Objetos de Valor
***** no armazenamento de persistência do modelo de domínio unificado em vez de uma consulta de banco de dados bruto (como SQL) em um armazenamento de consulta / leitura separado
**** Vários clientes distintos
***** RIA
***** DataTransformer
**** Rendition Adapters e Handling User Edits.
***** Presentation Model (Atua como um Adapter)
****** Seu objetivo é separar responsabilidades entre apresentação e visualização.
****** As vistas são renderizadas com base no modelo de apresentação. Acho que esta é uma forma mais natural e elimina o acoplamento do modelo de apresentação à visualização.
****** As visualizações são renderizadas pelo modelo de apresentação. Essa maneira tem vantagens de teste, mas requer que o modelo de apresentação se acople à exibição. 
*** Serviços da Aplicação
**** Clientes diretos do modelo de domínio
**** Coordena tarefas e fluxos de casos de uso
**** Um método por fluxo
**** Cuida da transação e da segurança
**** Portas e Adaptadores
***** pode tornar mais difícil nomear métodos de serviço de aplicativo que realizam consultas
*** Infraestrutura
**** Fornece recursos técnicos para para as outras partes do aplicativo

** A+ES
*** Cada alteração na instância de um Agregado não será perdida
**** • Confiabilidade\n• Inteligencia de negócios e curto e longo prazos\n• Registro de auditoria completo\n• Capacidade de olhar pra trás no tempo para fins de depuração.
*** Event Streams
**** • A natureza somente acréscimo tem desempenho muito bom\n• Oferece uma variedade de opções de replicação de dados\n• Sistemas com latência muito baixa
*** Abordagem centrada em Eventos
**** • Permite que os desensvolvedores foquem nas ações de comportamentos expressos pela linguagem ubíqua\n• Evita a incompatibilidade de impedância potencial do mapeamento objeto-relaciona\n• Pode levar a sistemas mais robustos e com tolerância a mudanças.
*** Desvantagens: não é uma bala de prata!
**** • Requer um conhecimento profundo do domínio do negócio\n• Falta de ferramentas e de um corpo consistente de conhecimento neste campo*\n• Número limitado de desenvolvedores experientes\n• Requer CQRS, aumentando a carga cognitiva e a curva de aprendizado.
*** Implementação
**** Dividir em duas classes: estado e comportamento, com o primeiro sendo mantido pelo segundo
**** Resumo: 
***** 1. Um cliente invoca um método em um serviço de aplicativo.
***** 2. Obtenha todos os Serviços de Domínio necessários para realizar a operação comercial.
***** 3. Com a identidade da instância Aggregate fornecida pelo cliente, recupere seu Fluxo de Eventos.
***** 4. Reconstitua a instância de agregado aplicando a ela todos os eventos do fluxo.
***** 5. Executar uma operação comercial fornecida pelo Agregado, passando em todos os parâmetros exigidos pelo contrato da interface.
***** 6. O Agregado pode despachar duas vezes para quaisquer Serviços de Domínio fornecidos, instâncias de outros Agregados e assim por diante e gerará novos Eventos como resultado da operação.
***** 7. Assumindo que nenhuma operação de negócios falhou, anexe todos os eventos recém-gerados ao Stream usando a versão do Stream para proteção contra conflitos de simultaneidade.
***** 8. Publique eventos recém-anexados do Event Store para assinantes usando sua escolha de infraestrutura de mensagens.
**** Commmands
***** Fácil tornar distribuído
***** Desacoplamento temporal do cliente para a aplicação
**** Lambdas*
**** Controle de concorrência
***** Event conflict resolution
**** Liberdade estrutural
**** Performance
***** Cache Event Streams
***** Reproduzir todos o eventos a partir de se instantâneo mais recente no Fluxo de Eventos
**** Persistência
***** Relacional
****** 1. Comece uma transação.
****** 2. Verifique se o Event Store mudou da versão esperada; em caso afirmativo, lance uma exceção.
****** 3. Se não houver conflitos de simultaneidade, anexe os Eventos.
****** 4. Confirme a transação.
***** Blob
*** Torna mais fácil o prjeto de novos Agregados
*** Read Model Projections
*** Pode ser usado com design de Agregado
*** Ferramentas e padrões de suporte:
**** Event Serializer
**** Event Immutability
**** Value Objects
**** Geração de contratos
***** Manter centenas de contratos de eventos (e comandos) manualmente é entediante e sujeito a erros. Geralmente é mais eficiente expressar suas definições em alguma linguagem compacta de domínio específico (DSL) que pode ser usada para geração de código simples, construindo classes corretas no momento da construção.
**** Unit Testing and Specifications.
***** Given Events in the past.
***** When Aggregate method is called.
***** Expect the following Events or an exception.
*** Natureza funcional; Pode ser expressa numa linguagem funcional.


@endmindmap